# -*- coding: utf-8 -*-
"""N-gram Analysis.ipynb

Automatically generated by Colab.

### Imports
"""

from collections import Counter
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

"""# Help functions

## extract Datasets
"""

# Load text data
with open("output/german_handwriting_transcriptions.txt", "r", encoding="utf-8") as f:
    german_text = f.read()

with open("output/iam_handwriting_transcriptions.txt", "r", encoding="utf-8") as f:
    english_text = f.read()

"""## extract n-grams"""
def extract_ngrams(text, n):
    text = text.lower()
    text = ''.join(char for char in text if char.isalpha())  # letters only
    return [text[i:i+n] for i in range(len(text)-n+1)]

"""## analyze"""

def analyze_ngrams(german_text, english_text, n):
    german_ngrams = extract_ngrams(german_text, n)
    english_ngrams = extract_ngrams(english_text, n)

    german_counter = Counter(german_ngrams)
    english_counter = Counter(english_ngrams)

    all_ngrams = set(german_counter) | set(english_counter)

    total_german = sum(german_counter.values())
    total_english = sum(english_counter.values())

    rows = []
    for ng in all_ngrams:
        count_de = german_counter.get(ng, 0)
        count_en = english_counter.get(ng, 0)

        rel_de = count_de / total_german if total_german > 0 else 0
        rel_en = count_en / total_english if total_english > 0 else 0

        ratio = rel_de / (rel_en + 1e-5)  # prevent 0 division
        diff = abs(count_de - count_en)

        # Categorize via ratio
        if ratio > 3:
            category = "german-dominant"
        elif ratio < 1/3:
            category = "english-dominant"
        else:
            category = "neutral"

        rows.append({
            "ngram": ng,
            "count_german": count_de,
            "count_english": count_en,
            "rel_german": rel_de,
            "rel_english": rel_en,
            "ratio": ratio,
            "diff": diff,
            "category": category,
            "absolute_count": count_de + count_en
        })

    df = pd.DataFrame(rows)
    df_sorted = df.sort_values("diff", ascending=False)

    return df_sorted

"""# Start Analyzing & Visualization"""

for n in [2, 3]:
    df_result = analyze_ngrams(german_text, english_text, n)
    df_result.to_csv(f"output/ngram_analysis_{n}gram.csv", index=False)



print("Finished analyzing. Results saved.")

