# -*- coding: utf-8 -*-
"""seperate_top_ngrams.ipynb

Automatically generated by Colab.

"""

from collections import Counter
import re
import os

def clean_text(text):
    return re.sub(r'[^a-zA-ZäöüÄÖÜß]', '', text.lower())

def extract_ngrams(text, n=2):
    cleaned = clean_text(text)
    return [cleaned[i:i+n] for i in range(len(cleaned) - n + 1)]

def get_top_ngrams(text, n=2, top_k=100):
    ngrams = extract_ngrams(text, n)
    return Counter(ngrams).most_common(top_k)

def save_ngram_list(ngram_list, path):
    with open(path, "w", encoding="utf-8") as f:
        for ngram, count in ngram_list:
            f.write(f"{ngram}\t{count}\n")

# -------------------------------
# Load transcription data
# -------------------------------

with open("output/german_handwriting_transcriptions.txt", "r", encoding="utf-8") as f:
    german_text = f.read()

with open("output/iam_handwriting_transcriptions.txt", "r", encoding="utf-8") as f:
    english_text = f.read()

# -------------------------------
# Analyse
# -------------------------------

# Extract top 100 Bi- und Trigramms
top_100_bi_de = get_top_ngrams(german_text, n=2, top_k=100)
top_100_tri_de = get_top_ngrams(german_text, n=3, top_k=100)
top_100_bi_en = get_top_ngrams(english_text, n=2, top_k=100)
top_100_tri_en = get_top_ngrams(english_text, n=3, top_k=100)

# -------------------------------
# save results
# -------------------------------

save_ngram_list(top_100_bi_de, "output/top100_bigrams_de.txt")
save_ngram_list(top_100_tri_de, "output/top100_trigrams_de.txt")
save_ngram_list(top_100_bi_en, "output/top100_bigrams_en.txt")
save_ngram_list(top_100_tri_en, "output/top100_trigrams_en.txt")


